/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.ie.server3.work3;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URL;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.MimetypesFileTypeMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JTextPane;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyledDocument;
import javax.swing.JLabel;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import net.ie.server3.work2.FileManager;
import static net.ie.server3.work3.ClientChatGUI.dataInputStream;
import static net.ie.server3.work3.ClientChatGUI.dataOutputStream;

/**
 *
 * @author wanchana
 */
public class Server3ChatGUI extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Server3ChatGUI
     */
    
    public static ServerSocket serversocket;
    public static Socket socket;
    public static Thread thread1;
    public static Thread thread2;
    
    public Server3ChatGUI() {
        initComponents();
    }
    
    public Server3ChatGUI(int numb){
        try {
            thread1 = new Thread(this);
            thread2 = new Thread(this);
            serversocket = new ServerSocket(12121);
            socket = serversocket.accept();
            thread1.start();
            thread2.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server3");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setText("send");
        jButton1.setActionCommand("send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jTextPane1);

        jButton2.setText("file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addContainerGap())
        );

        setBounds(0, 0, 410, 363);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        getContentPane().add(jTextField1);
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        String messagOut = "";
        
        messagOut = jTextField1.getText().trim();
        File file = new File(messagOut);

        if(file.exists() && file.isAbsolute()){
            byte[] byteArray = new byte[(int)file.length()];
            try {
                long lenght = file.length();
                byte[] bs = new byte[1024];
                InputStream inputStream = new FileInputStream(file);
                OutputStream outputStream = socket.getOutputStream();
                int count;
                while ((count = inputStream.read(bs)) > 0) {
                    outputStream.write(bs, 0, count);
                }

                outputStream.close();
                inputStream.close();
//                fileInputStream = new FileInputStream(file);
//                bufferedInputStream = new BufferedInputStream(fileInputStream);
//                bufferedInputStream.read(byteArray,0,byteArray.length);
//                
//                outputStream = socket.getOutputStream();
//                System.out.println("Sending " + messagOut + "(" + byteArray.length + " bytes)");
//                outputStream.write(byteArray,0,byteArray.length);
//                outputStream.flush();
//                dataOutputStream.writeUTF(messagOut);
                
                System.out.println("Done.");
                
                jLabel1.setText("Sending..." + jTextField1.getText().trim() + " (" + byteArray.length + ") bytes");
                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            
            } finally{
//                try {
//                    outputStream.close();
//                    fileInputStream.close();
//                } catch (IOException ex) {
//                    Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
//                }
            }
        }
//        else{
//            try {
//                System.out.println("do here");
//                StyledDocument doc = jTextPane1.getStyledDocument();
//                SimpleAttributeSet style = new SimpleAttributeSet();
//                StyleConstants.setBackground(style, Color.LIGHT_GRAY);
//                StyleConstants.setBold(style, true); 
//                doc.insertString(doc.getLength(), "\nคุณ พูดว่า : " + messagOut, style);
//                dataOutputStream.writeUTF(messagOut);
//            } catch (IOException ex) {
//                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
//            } catch (BadLocationException ex) {
//                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
          
//        JFileChooser jFileChooser = new JFileChooser();
//                
//        int fileChooser = jFileChooser.showDialog(null, "Choose file");
//
//        if(fileChooser == JFileChooser.APPROVE_OPTION){
//            File file = jFileChooser.getSelectedFile();
//            BufferedImage img = null;
//            try{
//                img = ImageIO.read(file);
//            } catch(IOException e){
//                e.printStackTrace();
//            }
//            if(isImage(file)){
//                jLabel1.setIcon(new ImageIcon(img));
//                jTextField1.setText(jFileChooser.getSelectedFile().toString());
//            }
//            else{
//                jTextField1.setText(jFileChooser.getSelectedFile().toString());
//            }
//        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws IOException, BadLocationException {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Server3ChatGUI().setVisible(true);
            }
        });
        
        new Server3ChatGUI(1);
//        Styles.setMessageStyleWelcome(jTextPane1, "Server is ready to connetions...");
//        Styles.setMessageStyleWelcome(jTextPane1, "\nConnected with Client IP " + socket.getInetAddress().getHostAddress());
//        String messageFromClient = "";
//        
//        try{
//            ServerSocket serverSocket = new ServerSocket(55555);
//            socket = serverSocket.accept();
//            
//            while(true){
//                dataOutputStream = new DataOutputStream(socket.getOutputStream());
//                if(!(new File(dataOutputStream.toString())).isAbsolute()){
////                if(false){
//                    dataInputStream = new DataInputStream(socket.getInputStream());
//                    messageFromClient = dataInputStream.readUTF();
//                    StyledDocument doc = jTextPane1.getStyledDocument();
//                    SimpleAttributeSet style = new SimpleAttributeSet();
//                    StyleConstants.setBackground(style, Color.green);
//                    StyleConstants.setBold(style, true); 
//                    StyleConstants.setAlignment(style,100);
//                    doc.insertString(doc.getLength(), "\nClient พูดว่า : " + messageFromClient, style);
//                }
//                else{
//                    System.out.println("Gotcha");
//                }
//
//            }
//            
//        } catch(Exception e){
//            e.printStackTrace();
//        } finally{
//            try {
//                if (bufferedInputStream != null) bufferedInputStream.close();
//                if (fileInputStream != null) fileInputStream.close();
//                if (outputStream != null) outputStream.close();
//                if (socket != null) socket.close();
//            } catch (IOException ex) {
//                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private static javax.swing.JButton jButton2;
    private static javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextField jTextField1;
    private static javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        try {
            if (Thread.currentThread() == thread1) {
                DataInputStream dataInputStream = null;
                DataOutputStream dataOutputStream = null;
                BufferedReader bufferedReader = null;
                PrintWriter printWriter = null;
                String messageIn = "";
                String messageOut = "";
                do {
                    dataInputStream = new DataInputStream(socket.getInputStream());
                    dataOutputStream = new DataOutputStream(socket.getOutputStream());
                    printWriter = new PrintWriter(socket.getOutputStream(), true);
                    messageIn = dataInputStream.readUTF();
                    Styles.setMessageStyleRecieved(jTextPane1, messageIn);
                } while (!messageIn.equals("bye"));
            }
            else {
                DataInputStream dataInputStream = null;
                DataOutputStream dataOutputStream = null;
                BufferedReader bufferedReader = null;
                PrintWriter printWriter = null;
                String messageIn = "";
                String messageOut = "";
                do {
                    dataInputStream = new DataInputStream(socket.getInputStream());
                    dataOutputStream = new DataOutputStream(socket.getOutputStream());
                    bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                    String msg = bufferedReader.readLine();
                    String checkMsg = msg.substring(0, 2);
                    String fileNameRecieved = "";

                    if (checkMsg.equals("m$")) {
                        System.out.println("");
                        messageOut = msg.substring(2, msg.length());
                        System.out.println("Client says : : : " + messageOut);
                    } else {
                        fileNameRecieved = msg.substring(0, msg.indexOf("#"));
                        File dir = new File("C:\\Download-from-client");
                        if (!dir.exists()) {
                            try {
                                System.out.println("Creating... directory C:\\Download-from-client");
                                dir.mkdir();
                                System.out.println("The directory created");
                            } catch (SecurityException securityException) {
                                System.out.println("SecurityException occure!!!");
                                securityException.printStackTrace();
                            }
                        }
                        File file = new File("C:\\Download-from-client\\" + FileManager.findFileName(fileNameRecieved) + "-downloaded." + FileManager.findFileType(fileNameRecieved));
                        FileManager.recieveFile(file, dataInputStream, dataOutputStream);
                    }
                } while (!messageOut.equals("bye"));
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        } finally{
            try {
                socket.close();
            } catch (IOException ex) {
                Logger.getLogger(Server3ChatGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}


